# -*- coding: utf-8 -*-
"""video_emotion_rgb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TuOPhMgqJ4f1vAr8dWjnMmIJa4fuabca
"""

import os
import tensorflow as tf
print("tensorflow version: ", tf.__version__)

from statistics import mode
import cv2
from keras.models import load_model
import numpy as np
import PIL
from utils.datasets import get_labels
from utils.inference import detect_faces
from utils.inference import draw_text
from utils.inference import draw_bounding_box
from utils.inference import apply_offsets
from utils.inference import load_detection_model
from utils.preprocessor import preprocess_input
import pickle
import face_recognition
import matplotlib.pyplot as plt
import numpy as np
import sys
from sklearn.cluster import DBSCAN
import argparse
import math

#Parsing arguments
def parse_args():
    parser = argparse.ArgumentParser(description='Create timelines for each subject displaying every emotion in a video')
    parser.add_argument('-f', '--frames_window_length', default = 15,  type=int)
    parser.add_argument('--face_detection_model_path', default = '../trained_models/detection_models/haarcascade_frontalface_default.xml')
    parser.add_argument('--emotion_recognition_model_path', default='../trained_models/emotion_models/fer2013_mini_XCEPTION.102-0.66.hdf5')
    parser.add_argument('--gender_recognition_model_path', default='../trained_models/gender_models/simple_CNN.81-0.96.hdf5')
    parser.add_argument('-v', '--video_path', default='../../videoplayback.mp4')
    parser.add_argument('-out', '--output_directory_path', default='./video_out')
    parser.add_argument('--enable_visualization', action='store_true',help='visualize the faces with bounding boxes in every frame')
    parser.add_argument('-e', '--face_embeddings_path', help='use previously generated face embeddings')
    parser.add_argument('--save_embed', action='store_true', help='save face embeddings')
    #parser.add_argument('-c', '--cutoff_time', default=math.inf, type=int, help='time till which you want to process the video from starting')
    parser.add_argument('-t','--time_interval', type=int, nargs=2, default=[0, -1], help='Time duration for which you want to process the video')
    return parser.parse_args()


args = parse_args()

detection_model_path = args.face_detection_model_path #'../trained_models/detection_models/haarcascade_frontalface_default.xml'
emotion_model_path = args.emotion_recognition_model_path #'../trained_models/emotion_models/fer2013_mini_XCEPTION.102-0.66.hdf5'
gender_model_path = args.gender_recognition_model_path #'../trained_models/gender_models/simple_CNN.81-0.96.hdf5'
gender_labels = get_labels('imdb')
emotion_labels = get_labels('fer2013')


gender_offsets = (30, 60)

face_detection = load_detection_model(detection_model_path)
gender_classifier = load_model(gender_model_path, compile=False)
emotion_classifier = load_model(emotion_model_path, compile=False)

emotion_target_size = emotion_classifier.input_shape[1:3]
gender_target_size = gender_classifier.input_shape[1:3]

print("input size for emotion recognition: ", emotion_target_size)
print("input size for gender recognition: ", gender_target_size)

sample_video_path = args.video_path

#video_capture = cv2.VideoCapture(sample_video_path)

face_data = []

#Processing video frame-by-frame to detect faces in each frame, predict gender and facial emotion
if args.face_embeddings_path is None:
    video_capture = cv2.VideoCapture(sample_video_path)
    tot_frames = 0
    face_index = 0
    while True:
        
        ret, bgr_image = video_capture.read()
        
        
        if ret == False:
            break
        
        frame_time =  video_capture.get(cv2.CAP_PROP_POS_MSEC)
        
        if frame_time < args.time_interval[0]:
            continue

        if args.time_interval[1] != -1 and frame_time > args.time_interval[1]:
            break
        
        gray_image = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2GRAY)
        rgb_image = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2RGB)
        face_locations = face_recognition.face_locations(rgb_image, model="cnn")
        tot_frames += 1
        
        maxh, maxw = rgb_image.shape[:2]
        
        for top, right, bottom, left in face_locations:
            
            face_index += 1
            
            face_dict = {}
            
            #face_dict["rgb_image"] = rgb_image
            face_dict["bb"] = (top, right, bottom, left)
            face_dict["face_index"] = face_index
            face_dict["frame_number"] = tot_frames
            
            
            
            encodings = face_recognition.face_encodings(rgb_image, [(top, right, bottom, left)])
            
            face_dict["encodings"] = encodings[0]
            
            x_off, y_off = emotion_offsets
            #n_left, n_right, n_top, n_bottom = apply_offsets((left,top,right-left,bottom-top), emotion_offsets)
            n_left, n_right, n_top, n_bottom = (max(left - x_off,0), min(right + x_off, maxw), max(top - y_off,0), min(bottom + y_off, maxh))
            
            #print("top: {0}\tright: {1}\tbottom: {2}\tleft: {3}".format(top, right, bottom, left))
            #print("n_top: {0}\tn_right: {1}\tn_bottom: {2}\tn_left: {3}".format(n_top, n_right, n_bottom, n_left))
            
            gray_face = gray_image[n_top:n_bottom, n_left:n_right]
            try:
                gray_face = cv2.resize(gray_face, (emotion_target_size))
            except:
                continue
    
            gray_face = preprocess_input(gray_face, True)
            gray_face = np.expand_dims(gray_face, 0)
            gray_face = np.expand_dims(gray_face, -1)
            emotion_prediction = emotion_classifier.predict(gray_face)
            emotion_probability = np.max(emotion_prediction)
            emotion_label_arg = np.argmax(emotion_prediction)
            emotion_text = emotion_labels[emotion_label_arg]
            face_dict["emotion_text"] = emotion_text
            
            x_off, y_off = gender_offsets
            n_left, n_right, n_top, n_bottom = (max(left - x_off,0), min(right + x_off, maxw), max(top - y_off,0), min(bottom + y_off, maxh))
            
            #n_left, n_right, n_top, n_bottom = apply_offsets((left,top,right-left,bottom-top), gender_offsets)
            rgb_face = rgb_image[n_top:n_bottom, n_left:n_right]
            try:
                rgb_face = cv2.resize(rgb_face, (gender_target_size))
            except:
                continue
    
            rgb_face = preprocess_input(rgb_face, True)
            rgb_face = np.expand_dims(rgb_face, 0)
            gender_prediction = gender_classifier.predict(rgb_face)
            gender_label_arg = np.argmax(gender_prediction)
            gender_text = gender_labels[gender_label_arg]
            face_dict["gender_text"] = gender_text
    
            face_dict["frame_time"] = frame_time
            
            face_data.append(face_dict)
            #print("face_data len: %d"%len(face_data))
            if tot_frames % 1 == 0:
                print("face_index: ",face_index)
                print("frame_time: ", frame_time)
                print("emotion_text: ", emotion_text)
                print("frame_number: ", tot_frames)
                print("gender_text: ", gender_text)
    
                if args.enable_visualization:
                    rgb_image_copy = rgb_image.copy()
                    cv2.rectangle(rgb_image_copy, (left, top), (right, bottom), (255, 0, 0), 2)
                    cropped_face = rgb_image_copy[top:bottom, left:right,:]
                    #print(cropped_face.shape)
                    plt.axis("off")
                    plt.imshow(cropped_face)
                    plt.show()
            
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    video_capture.release()

    print("total frames: ", tot_frames)
    print("Total number of detected faces: ", len(face_data))
    face_data = np.array(face_data)

    if args.save_embed:
        f = open('face_data', "wb")
        f.write(pickle.dumps(face_data))
        f.close()

if args.face_embeddings_path is not None:
    face_data = pickle.loads(open('face_data', "rb").read())
    face_data = np.array(face_data)
    encodings = [d["encodings"] for d in face_data]



encodings = [d["encodings"] for d in face_data]

clt = DBSCAN(metric="euclidean")

clt.fit(encodings)

#print(clt.labels_)

labelIDs = np.unique(clt.labels_)

print("labels: ",labelIDs)

face_data_classified = [[] for i in range(len(labelIDs))]

for idx, label in enumerate(clt.labels_):
    face_data_classified[label].append(face_data[idx])



id_list = []

for idx in range(len(labelIDs)):
    #print("idx: {0} - {1}".format(idx, len(face_data_classified[idx])))
    if len(face_data_classified[labelIDs[idx]]) >= 25 and labelIDs[idx] != -1:
        id_list.append(labelIDs[idx])

print("idlist: ",id_list)

frame_window = args.frames_window_length
#small_frame_window = args.small_frames_window_length
emotion_window = []

#for idx in id_list:
#    print("label: ",idx)
#    for f in face_data_classified[idx]:
#        print(f['emotion_text'])


for idx in id_list:
    previous_frame_number = 0
    
    for f in face_data_classified[idx]:
        if f["frame_number"] != previous_frame_number+1:
            emotion_window = []
        emotion_window.append(f["emotion_text"])
        if len(emotion_window) > frame_window:
            emotion_window.pop(0)
        try:
            f["emotion_text"] = mode(emotion_window)
        except:
            continue
        previous_frame_number = f["frame_number"]

#for idx in id_list:
#    print("label: ",idx)
#    for f in face_data_classified[idx]:
#        print(f['emotion_text'])


emotions_per_id = {label : {emotion : [] for emotion in set(f['emotion_text'] for f in face_data_classified[label])} for label in id_list}

subjects_dict = {label: {'gender' : mode([f['gender_text'] for f in face_data_classified[label]]), 'emotions':{emotion : [] for emotion in set(f['emotion_text'] for f in face_data_classified[label])}} for label in id_list}


for idx in id_list:
    print("idx: %d, "%idx)
    print(subjects_dict[idx]['emotions'].keys())

for idx in id_list:
    for f in face_data_classified[idx]:
        emotions_per_id[idx][f["emotion_text"]].append((f["frame_number"], f["frame_time"]))

for idx in id_list:
    for emotion in emotions_per_id[idx]:
        frame_start = emotions_per_id[idx][emotion][0]
        previous_frame = frame_start
        for frame in emotions_per_id[idx][emotion][1:]:
            if frame[0] != previous_frame[0] + 1:
                subjects_dict[idx]['emotions'][emotion].append((frame_start, previous_frame))
                frame_start = frame
            previous_frame = frame
        
        if previous_frame[0] != frame_start[0]:
            subjects_dict[idx]['emotions'][emotion].append((frame_start, previous_frame))


out_dir_path = args.output_directory_path
if not os.path.exists(out_dir_path):
    os.mkdir(out_dir_path)

for idx, label in enumerate(id_list):
    with open(os.path.join(out_dir_path,'subject%d.txt'%idx), 'w') as f:
        f.write('Gender : %s\n'%subjects_dict[label]['gender'])
        f.write('\n\n')
        for emotion in emotions_per_id[label]:
            f.write('\n\n')
            f.write(emotion)
            f.write('\n\n')
            f.write('s_frame_number\te_frame_number\t\ts_frame_time(in milli sec)\t\te_frame_time(in milli sec)\n')
            f.write('\n\n')
            for timeline in subjects_dict[label]['emotions'][emotion]:
                f.write('  '+str(timeline[0][0])+'\t\t\t'+str(timeline[1][0])+'\t\t\t'+str(int(timeline[0][1]))+'\t\t\t\t\t'+str(int(timeline[1][1]))+'\n')